#!/usr/bin/env python3

import argparse
import re
import sys
import time
import urllib

from prometheus_client import start_http_server
from prometheus_client.core import CounterMetricFamily, GaugeMetricFamily, REGISTRY


class TinyproxyCollector(object):
    def __init__(self, stathost, tinyproxy):
        self.stathost = stathost
        self.tinyproxy = tinyproxy

    def collect(self):
        handler = urllib.request.ProxyHandler({'http': self.tinyproxy})
        opener = urllib.request.build_opener(handler)
        urllib.request.install_opener(opener)
        response = urllib.request.urlopen(f'http://{self.stathost}')
        content = response.read().decode('utf-8')
        
        # Update regex to match the new HTML structure
        values = [
            int(x) for x in re.findall(
                r'<td class="center">(\d+)</td>', content)
        ]
        
        yield GaugeMetricFamily('tinyproxy_connections_open',
                                'Number of open connections', values[0])
        yield CounterMetricFamily('tinyproxy_connections_bad_total',
                                  'Number of bad connections', values[1])
        yield CounterMetricFamily('tinyproxy_connections_denied_total',
                                  'Number of denied connections', values[2])
        yield CounterMetricFamily(
            'tinyproxy_connections_refused_total',
            'Number of refused connections due to high load', values[3])
        yield CounterMetricFamily('tinyproxy_requests_total',
                                  'Number of requests', values[4])


def parse_args():
    parser = argparse.ArgumentParser(
        description='Prometheus exporter for Tinyproxy.')
    parser.add_argument(
        '-l',
        metavar='LISTEN',
        default=':9240',
        help='address on which to expose metrics (default ":9240")')
    parser.add_argument(
        '-s',
        metavar='STATHOST',
        default='tinyproxy.stats',
        help='internal statistics page address (default "tinyproxy.stats")')
    parser.add_argument('-t',
                        metavar='TINYPROXY',
                        default='127.0.0.1:8888',
                        help='tinyproxy address (default "127.0.0.1:8888")')
    return parser.parse_args()


def main():
    try:
        args = parse_args()
        addr, port = args.l.split(':')
        REGISTRY.register(TinyproxyCollector(args.s, args.t))
        start_http_server(int(port), addr)
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print(' Interrupted')
        sys.exit(0)


if __name__ == '__main__':
    main()
